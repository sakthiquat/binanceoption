# ============================================================================
# BTC Options Straddle Bot Configuration Template
# ============================================================================
# 
# SECURITY NOTICE:
# 1. Copy this file to 'config.yml' and update with your actual values
# 2. NEVER commit config.yml with real credentials to version control
# 3. Set file permissions to 600 (owner read/write only): chmod 600 config.yml
# 4. Use IP restrictions on your Binance API key
# 5. Enable only necessary permissions: Options Trading, Futures Trading (read-only)
# 6. Consider using environment variables for sensitive data in production
#
# ============================================================================

# Trading Configuration
trading:
  # ========================================
  # REQUIRED: Binance API Credentials
  # ========================================
  # Get these from: Binance Account -> API Management -> Create API
  # Required permissions: Options Trading, Futures Trading (read-only)
  api-key: "YOUR_BINANCE_API_KEY_HERE"
  secret-key: "YOUR_BINANCE_SECRET_KEY_HERE"
  
  # ========================================
  # Trading Session Configuration
  # ========================================
  # Session times in 24-hour format (HH:MM:SS)
  # Bot will only trade between these times
  session-start-time: "12:25:00"    # Default: 12:25 PM
  session-end-time: "13:25:00"      # Default: 1:25 PM (1 hour session)
  
  # ========================================
  # Trading Cycle Configuration
  # ========================================
  # How often to create new iron butterfly positions
  cycle-interval-minutes: 5          # Wait 5 minutes between cycles
  number-of-cycles: 10              # Maximum 10 cycles per session
  
  # ========================================
  # Position Configuration
  # ========================================
  # Size of each option position (minimum: 0.01 BTC)
  position-quantity: 0.01           # 0.01 BTC per option leg
  
  # Distance from ATM for protective options (number of strikes)
  strike-distance: 10               # Buy options 10 strikes away from ATM
  
  # ========================================
  # Risk Management Configuration
  # ========================================
  # Individual position risk limits (percentages)
  stop-loss-percentage: 30.0        # Close position at 30% loss
  profit-target-percentage: 50.0    # Close position at 50% profit
  
  # Portfolio-level risk limit (percentage of max theoretical loss)
  portfolio-risk-percentage: 10.0   # Emergency close all at 10% of max loss
  
  # ========================================
  # Order Execution Configuration
  # ========================================
  # Aggressive fill strategy settings
  order-timeout-seconds: 60         # Cancel unfilled orders after 60 seconds
  order-retry-interval-seconds: 1   # Check/modify orders every 1 second
  max-order-book-depth: 5          # Look up to 5 levels deep in order book
  
  # ========================================
  # OPTIONAL: Telegram Notifications
  # ========================================
  # Create a bot via @BotFather on Telegram to get these values
  # Leave empty to disable Telegram notifications
  telegram-bot-token: ""            # Your Telegram bot token
  telegram-chat-id: ""              # Your Telegram chat ID
  
  # Notification settings
  enable-startup-notifications: true
  enable-error-notifications: true
  enable-session-summary: true

# ============================================================================
# Application Configuration
# ============================================================================

# Logging Configuration
logging:
  level:
    # Application logging levels
    com.trading.bot: INFO            # Main application logs
    com.trading.bot.service: DEBUG   # Service layer logs (for debugging)
    com.trading.bot.exception: WARN  # Exception handling logs
    
    # Spring framework logging
    org.springframework: WARN
    org.springframework.web: INFO
    
    # HTTP client logging (for API debugging)
    okhttp3: INFO
    
  # Log file configuration
  file:
    name: logs/btc-options-bot.log
    max-size: 100MB
    max-history: 30                  # Keep 30 days of logs
    
  # Console logging pattern
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"

# Spring Boot Configuration
spring:
  application:
    name: btc-options-straddle-bot
    
  # Profile configuration
  profiles:
    active: production               # Use 'testing' for test environment
    
  # Jackson JSON configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false
      
  # HTTP client configuration
  http:
    client:
      connect-timeout: 10000         # 10 second connection timeout
      read-timeout: 30000           # 30 second read timeout

# ============================================================================
# Advanced Configuration (Optional)
# ============================================================================

# Circuit Breaker Configuration
circuit-breaker:
  failure-threshold: 5              # Open circuit after 5 failures
  success-threshold: 3              # Close circuit after 3 successes
  timeout-minutes: 2               # Wait 2 minutes before retry
  reset-timeout-minutes: 10        # Reset failure count after 10 minutes

# Retry Configuration
retry:
  max-attempts: 3                  # Maximum retry attempts for API calls
  initial-delay-ms: 1000          # Initial delay: 1 second
  max-delay-ms: 8000              # Maximum delay: 8 seconds
  multiplier: 2.0                 # Exponential backoff multiplier

# Rate Limiting Configuration
rate-limit:
  requests-per-minute: 1200       # Binance allows 1200 requests per minute
  burst-capacity: 100             # Allow burst of 100 requests
  
# Monitoring Configuration
monitoring:
  enable-jvm-metrics: true        # Enable JVM monitoring
  enable-api-metrics: true        # Enable API call metrics
  metrics-export-interval: 60     # Export metrics every 60 seconds

# ============================================================================
# Environment-Specific Overrides
# ============================================================================

---
# Testing Profile Configuration
spring:
  profiles: testing
  
trading:
  # Use Binance testnet for testing
  api-base-url: "https://testnet.binancefuture.com"
  
  # Smaller position sizes for testing
  position-quantity: 0.001
  
  # Shorter session for testing
  session-start-time: "09:00:00"
  session-end-time: "09:10:00"
  cycle-interval-minutes: 1
  number-of-cycles: 3

logging:
  level:
    com.trading.bot: DEBUG          # More verbose logging for testing

---
# Development Profile Configuration
spring:
  profiles: development
  
trading:
  # Development-specific settings
  enable-dry-run: true             # Simulate trades without actual execution
  
logging:
  level:
    com.trading.bot: DEBUG
    org.springframework: DEBUG

# ============================================================================
# Configuration Validation Rules
# ============================================================================
#
# The following rules are enforced by the application:
#
# 1. API credentials must not be empty
# 2. Session start time must be before end time
# 3. Position quantity must be positive and >= 0.001
# 4. Cycle interval must be positive
# 5. Number of cycles must be positive
# 6. Strike distance must be positive
# 7. Risk percentages must be between 0 and 100
# 8. If Telegram is configured, both token and chat ID must be provided
#
# ============================================================================

# ============================================================================
# Security Best Practices
# ============================================================================
#
# 1. API Key Security:
#    - Create a dedicated API key for this bot
#    - Enable only required permissions (Options Trading, Futures read-only)
#    - Set IP restrictions to your server's IP address
#    - Regularly rotate API keys
#
# 2. File Security:
#    - Set restrictive file permissions: chmod 600 config.yml
#    - Store config file outside of web-accessible directories
#    - Never commit config.yml to version control
#    - Add config.yml to .gitignore
#
# 3. Network Security:
#    - Use HTTPS for all API communications (enforced by default)
#    - Consider using a VPN for additional security
#    - Monitor API usage in Binance dashboard
#
# 4. Operational Security:
#    - Monitor bot logs regularly
#    - Set up alerts for unusual activity
#    - Keep the bot software updated
#    - Test configuration changes in testnet first
#
# 5. Risk Management:
#    - Start with small position sizes
#    - Monitor portfolio exposure carefully
#    - Have manual override procedures ready
#    - Keep emergency contact information accessible
#
# ============================================================================